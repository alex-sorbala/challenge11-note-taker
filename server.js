const express = require('express');
const path = require('path');
const fs = require('fs');
const util = require('util');
const crypto = require('crypto');

const PORT = 3001

// Initialize an instance of Express.js
const app = express();

// Static middleware pointing to the public folder
app.use(express.static('public'));
app.use(express.json());

// GET Route for homepage
app.get('/', (req, res) =>
    res.sendFile(path.join(__dirname, '/public/index.html'))
);

// GET /notes
app.get('/notes', (req, res) => res.sendFile(path.join(__dirname, '/public/notes.html')));

// Promise version of fs.readFile
const readFromFile = util.promisify(fs.readFile);

/**
 *  Function to write data to the JSON file given a destination and some content
 */
const writeToFile = (destination, content) =>
    fs.writeFile(destination, JSON.stringify(content, null, 4), (err) =>
        err ? console.error(err) : console.info(`\nData written to ${destination}`)
    );

/**
 *  Function to read data from a given a file and append some content
 */
const readAndAppend = (content, file) => {
    fs.readFile(file, 'utf8', (err, data) => {
        if (err) {
            console.error("Error " + err);
        } else {
            const parsedData = data ? JSON.parse(data) : [];
            parsedData.push(content);
            writeToFile(file, parsedData);
        }
    });
};

// GET /api/notes
app.get('/api/notes', (req, res) => {
    console.info(`${req.method} request received for notes`);
    readFromFile('./db/db.json','utf8').then((data) => data ? res.json(JSON.parse(data)) : res.json([]));
});

/*POST /api/notes
    creates a new note object and appends it to the db
    the unique note ID is generated by hashing the combination of title and a random number
*/
app.post('/api/notes', (req, res) => {
    console.info(`${req.method} request received to add a note`);

    const { title, text } = req.body;

    if (req.body) {
        const newNote = {
            title,
            text,
            id : crypto.createHash('md5').update(title + Math.random()).digest('hex')         
        };

        readAndAppend(newNote, './db/db.json');
        res.json(`Note added successfully`);
    } else {
        res.error('Error in adding note');
    }
});

/*DELETE /api/notes/:id
    uses filter() to to remove note with matching id
*/
app.delete('/api/notes/:id', (req, res) => {
    const id = req.params.id;
    console.log("Deleting " + id);

    fs.readFile('./db/db.json', 'utf8', (err, data) => {
        if (err) {
            res.json('Error deleting note');
            console.error(err);
        } else {
            const parsedData = JSON.parse(data);
            const updatedList = parsedData.filter((note) => note.id !== id)
            console.log(id);
            writeToFile('./db/db.json', updatedList);
            res.json('Successfully deleted note: ' + id);
        }
    });
    
});

// listen() method is responsible for listening for incoming connections on the specified port 
app.listen(PORT, () =>
    console.log(`Example app listening at http://localhost:${PORT}`)
);